# -*- coding: utf-8 -*-
"""Question 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KA25F39C9qbRIK26RmYCUrhbkj32Pup5
"""

import numpy as np
import pandas as pd
from scipy import stats

# 2a 
def t_test(num_vars, bin_vars):
    """Performs independent-samples t-tests for multiple continuous and binary pandas Series.

    Args:
        num_vars (list[pd.Series]): List of continuous variables.
        bin_vars (list[pd.Series]): List of binary grouping variables (any two distinct values).

    Returns:
        pd.DataFrame: DataFrame with one row per (continuous, binary) pairing, containing t-statistic,
degrees of freedom, p-value, and other summary statistics.
    """
    all_results = []

    for num_var in num_vars:
        for bin_var in bin_vars:
            # check that bin_var is dichotomous
            levels = pd.Series(bin_var.dropna().unique())
            assert levels.size == 2, (
                f"All bin_vars must be dichotomous! "
                f"The {bin_var.name} variable has more than 2 categories!"
            )

            level0, level1 = levels.iloc[0], levels.iloc[1]

            # split into two groups
            g1 = num_var[bin_var == level0]
            g2 = num_var[bin_var == level1]

            n1, n2 = g1.shape[0], g2.shape[0]
            s2_1, s2_2 = g1.var(ddof=1), g2.var(ddof=1)
            DF = n1 + n2 - 2

            mean_diff = g2.mean() - g1.mean()
            sp = np.sqrt(((n1 - 1) * s2_1 + (n2 - 1) * s2_2) / DF)
            SE = sp * np.sqrt(1/n1 + 1/n2)

            t_stat = mean_diff / SE
            p_val = 2 * (1 - stats.t.cdf(abs(t_stat), DF))

            df = pd.DataFrame({
                "Continuous Variable":   [num_var.name],
                "Binary Variable":       [bin_var.name],
                "Levels":                [f"{level0} vs {level1}"],
                "Total Sample Size":     [n1 + n2],
                "Mean Difference":       [round(mean_diff, 2)],
                "SE of Mean Difference": [round(SE, 2)],
                "DF":                    [DF],
                "t-statistic":           [round(t_stat, 3)],
                "P-value":               [("%.3f" % p_val).lstrip('0')],
                "Test":                  ["Independent samples t-test"]
            })

            all_results.append(df)

    return pd.concat(all_results, ignore_index=True)

# 2b
help(t_test)

# 2c
def t_test(num_vars, bin_vars):
    """Performs independent-samples t-tests for multiple continuous and binary pandas Series.

    Args:
        num_vars (list[pd.Series]): List of continuous variables.
        bin_vars (list[pd.Series]): List of binary grouping variables (any two distinct values).

    Returns:
        pd.DataFrame: DataFrame with one row per (continuous, binary) pairing, containing t-statistic,
        degrees of freedom, p-value, and other summary statistics.
    """
    all_results = []

    for num_var in num_vars:
        for bin_var in bin_vars:
            levels = pd.Series(bin_var.dropna().unique())
            assert levels.size == 2, (
                f"All bin_vars must be dichotomous! "
                f"The {bin_var.name} variable has more than 2 categories!"
            )

            level0, level1 = levels.iloc[0], levels.iloc[1]

            g1 = num_var[bin_var == level0]
            g2 = num_var[bin_var == level1]

            n1, n2 = g1.shape[0], g2.shape[0]
            s2_1, s2_2 = g1.var(ddof=1), g2.var(ddof=1)
            DF = n1 + n2 - 2

            mean_diff = g2.mean() - g1.mean()
            sp = np.sqrt(((n1 - 1) * s2_1 + (n2 - 1) * s2_2) / DF)
            SE = sp * np.sqrt(1/n1 + 1/n2)

            t_stat = mean_diff / SE
            p_val = 2 * (1 - stats.t.cdf(abs(t_stat), DF))

            df_result = pd.DataFrame({
                "Continuous Variable":   [num_var.name],
                "Binary Variable":       [bin_var.name],
                "Levels":                [f"{level0} vs {level1}"],
                "Total Sample Size":     [n1 + n2],
                "Mean Difference":       [round(mean_diff, 2)],
                "SE of Mean Difference": [round(SE, 2)],
                "DF":                    [DF],
                "t-statistic":           [round(t_stat, 3)],
                "P-value":               [("%.3f" % p_val).lstrip('0')],
                "Test":                  ["Independent samples t-test"]
            })

            all_results.append(df_result)

    return pd.concat(all_results, ignore_index=True)

# Loading my dataset
df = pd.read_csv('/content/3 ged_data.csv')

# Creating the new variable 'ged_cats'
df['ged_cats'] = df['ged'].apply(lambda x: 'ged' if x == 1 else 'no ged')

num_vars = [df['income_log'], df['post_sec_edu']]
bin_vars = [df['ged'], df['ged_cats'], df['female']]

results = t_test(num_vars, bin_vars)
print(results)

# Answers to the Questions

# Question 1: Does your function appear to be working?
# Yes, the function appears to be working. It appears to be accepcting all my inputs and outputting an answer.

# Question 2: Do you get the same answers when the ged and ged_cats variables are compared to the same numeric variable?
# Yes we get the same answers when the ged and ged_cats variables are compared to the same numeric variable. When we recode from 0/1 to ged/no ged, the results does not change the statisitcal results as seen in the output.

# Creating my inputs
num_vars = [df['income_log'], df['post_sec_edu']]
bin_vars = [df['BYRACE']]  # BYRACE is not binary

# 2d
results = t_test(num_vars, bin_vars)

# Yes, the function crashed and gave me the assertion error "All bin_vars must be dichotomous! The BYRACE variable has more than 2 categories!"
